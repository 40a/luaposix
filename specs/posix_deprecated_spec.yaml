specify deprecated:
- before:
    socket, getaddrinfo, close = posix.socket, posix.getaddrinfo, posix.close
    AF_INET, AF_INET6, AF_UNIX, AF_NETLINK =
      posix.AF_INET, posix.AF_INET6, posix.AF_UNIX, posix.AF_NETLINK
    SOCK_STREAM = posix.SOCK_STREAM

    init = function (M, fname)
      return M[fname], function (...) return badargs.format (fname, ...) end
    end

- describe connect:
  - before:
      connect, badarg = init (posix, "connect")

  - context with bad arguments: |
      badargs.diagnose (connect, "connect (int, table)")

      examples {
        ["it diagnoses wrong family types"] = function ()
          expect (connect (42, {family=false})).
            to_raise (badarg (2, "int", "family", "boolean"))
          expect (connect (42, {family=-1})).
            to_raise "bad argument #2 to 'connect' (unsupported family type -1)"
        end
      }
      examples {
        ["it diagnoses wrong AF_INET field types"] = function ()
          expect (connect (42, {family=AF_INET, port=false})).
            to_raise (badarg (2, "int", "port", "boolean"))
          expect (connect (42, {family=AF_INET, port=9999, addr=false})).
            to_raise (badarg (2, "string", "addr", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_INET fields"] = function ()
          expect (connect (42, {
            family=AF_INET, port=9999, addr="127.0.0.1", flags=false
          })).to_raise "bad argument #2 to 'connect' (invalid field name 'flags')"
        end
      }
      examples {
        ["it diagnoses wrong AF_INET6 field types"] = function ()
          expect (connect (42, {family = AF_INET6, port = false})).
            to_raise (badarg (2, "int", "port", "boolean"))
          expect (connect (42, {family = AF_INET6, port = 9999, addr = false})).
            to_raise (badarg (2, "string", "addr", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_INET6 fields"] = function ()
          expect (connect (42, {
            family=AF_INET6, port=9999, addr="::", flags=false
          })).to_raise "bad argument #2 to 'connect' (invalid field name 'flags')"
        end
      }
      examples {
        ["it diagnoses wrong AF_UNIX field types"] = function ()
          expect (connect (42, {family = AF_UNIX, path = false})).
            to_raise (badarg (2, "string", "path", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_UNIX fields"] = function ()
          expect (connect (42, {family=AF_UNIX, path="/tmp/afunix", port=9999})).
            to_raise "bad argument #2 to 'connect' (invalid field name 'port')"
        end
      }
      if AF_NETLINK then
        examples {
          ["it diagnoses wrong AF_NETLINK field types"] = function ()
              expect (connect (42, {family = AF_NETLINK, pid = false})).
                to_raise (badarg (2, "int", "pid", "boolean"))
              expect (connect (42, {family = AF_NETLINK, pid = 9999, groups = false})).
                to_raise (badarg (2, "int", "groups", "boolean"))
          end
        }
        examples {
          ["it diagnoses invalid AF_NETLINK fields"] = function ()
            expect (connect (42, {family=AF_NETLINK, pid=9999, groups=9999, port=9999})).
              to_raise "bad argument #2 to 'connect' (invalid field name 'port')"
          end
        }
      end

  - it returns true on success:
      fd = socket (AF_INET, SOCK_STREAM, 0)
      ait = getaddrinfo ("www.lua.org", "http", {family = AF_INET, socktype = SOCK_STREAM})
      expect (connect (fd, ait[1])).to_be (true)
      close (fd)



- describe bind:
  - before:
      bind, badarg = init (posix, "bind")

  - context with bad arguments: |
      badargs.diagnose (bind, "bind (int, table)")

      examples {
        ["it diagnoses wrong family types"] = function ()
          expect (bind (42, {family=false})).
            to_raise (badarg (2, "int", "family", "boolean"))
          expect (bind (42, {family=-1})).
            to_raise "bad argument #2 to 'bind' (unsupported family type -1)"
        end
      }
      examples {
        ["it diagnoses wrong AF_INET field types"] = function ()
          expect (bind (42, {family=AF_INET, port=false})).
            to_raise (badarg (2, "int", "port", "boolean"))
          expect (bind (42, {family=AF_INET, port=9999, addr=false})).
            to_raise (badarg (2, "string", "addr", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_INET fields"] = function ()
          expect (bind (42, {
            family=AF_INET, port=9999, addr="127.0.0.1", flags=false
          })).to_raise "bad argument #2 to 'bind' (invalid field name 'flags')"
        end
      }
      examples {
        ["it diagnoses wrong AF_INET6 field types"] = function ()
          expect (bind (42, {family = AF_INET6, port = false})).
            to_raise (badarg (2, "int", "port", "boolean"))
          expect (bind (42, {family = AF_INET6, port = 9999, addr = false})).
            to_raise (badarg (2, "string", "addr", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_INET6 fields"] = function ()
          expect (bind (42, {
            family=AF_INET6, port=9999, addr="::", flags=false
          })).to_raise "bad argument #2 to 'bind' (invalid field name 'flags')"
        end
      }
      examples {
        ["it diagnoses wrong AF_UNIX field types"] = function ()
          expect (bind (42, {family = AF_UNIX, path = false})).
            to_raise (badarg (2, "string", "path", "boolean"))
        end
      }
      examples {
        ["it diagnoses invalid AF_UNIX fields"] = function ()
          expect (bind (42, {family=AF_UNIX, path="/tmp/afunix", port=9999})).
            to_raise "bad argument #2 to 'bind' (invalid field name 'port')"
        end
      }
      if AF_NETLINK then
        examples {
          ["it diagnoses wrong AF_NETLINK field types"] = function ()
              expect (bind (42, {family = AF_NETLINK, pid = false})).
                to_raise (badarg (2, "int", "pid", "boolean"))
              expect (bind (42, {family = AF_NETLINK, pid = 9999, groups = false})).
                to_raise (badarg (2, "int", "groups", "boolean"))
          end
        }
        examples {
          ["it diagnoses invalid AF_NETLINK fields"] = function ()
            expect (bind (42, {family=AF_NETLINK, pid=9999, groups=9999, port=9999})).
              to_raise "bad argument #2 to 'bind' (invalid field name 'port')"
          end
        }
      end

  - it returns true on success:
      fd = socket (AF_INET, SOCK_STREAM, 0)
      expect (bind (fd, {family = AF_INET, addr = "127.0.0.1", port = 13457 })).to_be (true)
      close (fd)
